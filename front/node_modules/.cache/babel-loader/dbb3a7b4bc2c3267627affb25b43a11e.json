{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\erika\\\\Desktop\\\\proyectos\\\\Casa\\\\distribuidora\\\\front\\\\src\\\\Components\\\\Home\\\\Exportacion\\\\ventasVendedorTotal.js\";\nimport React from \"react\";\nimport ReactDOM from 'react-dom';\nimport api from '../../config/Api';\nimport \"react-tabulator/lib/css/bootstrap/tabulator_bootstrap.min.css\";\nimport { React15Tabulator } from \"react-tabulator\";\nimport axios from 'axios';\nimport moment from 'moment';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TextField from '@material-ui/core/TextField';\nimport ExcelDownload from './exportExcel';\nconst top100Films = [{\n  title: 'Ventas',\n  codigo: 0,\n  codigoCp: 'cpVentas'\n}, {\n  title: 'Venta de productos por fecha',\n  codigo: 1,\n  codigoCp: 'cpVentaProductos'\n}, {\n  title: 'Ventas del vendedor',\n  codigo: 2,\n  codigoCp: 'cpVentaVendedor'\n}, {\n  title: 'Ventas del vendedor pagadas',\n  codigo: 3,\n  codigoCp: 'cpVentaVendedorPagadas'\n}, {\n  title: 'Ventas del vendedor inpagadas',\n  codigo: 4,\n  codigoCp: 'cpVentaVendedorInpagadas'\n}, {\n  title: 'Ventas por producto',\n  codigo: 5,\n  codigoCp: 'cpVentaProducto'\n}, {\n  title: 'Comisiones pagadas',\n  codigo: 6,\n  codigoCp: 'cpComisionPagadas'\n}, {\n  title: 'Resumen ventas',\n  codigo: 6,\n  codigoCp: 'cpResuemenVentas'\n}];\nconst data = [];\n\nclass ListaPagos extends React.Component {\n  constructor(props) {\n    super(props);\n    this.consultaVentasProducto = this.consultaVentasProducto.bind(this);\n    this.exExcelTes = this.exExcelTes.bind(this);\n    this.getOptionsSelect = this.getOptionsSelect.bind(this);\n    this.state = {\n      data: '',\n      inicio: null,\n      final: null,\n      dataSelect: [],\n      arrayIdProductos: []\n    };\n  }\n\n  change(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  } //Cargamos los datos de la tabla.\n\n\n  componentDidMount() {\n    this.getProductos();\n  }\n\n  getProductos() {\n    axios.get(`${api}/api/vendedor`).then(res => {\n      //Validamos que el status de la respuesta de 200.\n      if (res.status === 200) {\n        let data = res.data.vendedores; //console.log();\n\n        this.setState({\n          dataSelect: data\n        });\n      }\n    });\n  }\n\n  getOptionsSelect(e) {\n    let idVendedores = [];\n    e.forEach(element => {\n      idVendedores.push(element.id);\n    });\n    this.setState({\n      arrayIdVendedores: idVendedores\n    });\n  } //Insertamos los datos.\n\n\n  consultaVentasProducto() {\n    let inicio = this.state.inicio;\n    let final = this.state.final;\n    let idVendedores = this.state.arrayIdVendedores; //console.log(idProductos);\n\n    const data = 1;\n    this.setState({\n      data\n    }); //Realizamos la consulta con las fehcas\n\n    axios.post(`${api}/api/informes/ventasVendedorTotal/${inicio}/${final}/${idVendedores}`).then(res => {\n      //Validamos que el status de la respuesta de 200.\n      if (res.status === 200) {\n        let dataVentas = res.data.ventas;\n        let newArrayDatosGrilla = [];\n        let newArrayDatosExcel2 = []; //Creamos los titulos.\n\n        let arrayTitulos = ['Fecha Documento', 'N Factura', 'Nombre Cliente', 'Tipo Factura', 'Codigo', 'Rut', 'Producto', 'cantidad', 'Total Neto', 'IVA', 'Total'];\n        let totalNeto = 0;\n        let totalIvav = 0;\n        let totalTotal = 0;\n        let cantidadDatos = 0;\n\n        for (let i = 0; i < dataVentas.length; i++) {\n          //Convertimos la fecha \n          let newFecha = new Date(dataVentas[i]['fechaDocumento']);\n          newFecha = moment(newFecha).format('DD/MM/YYYY');\n          let newArrayDatosExcel = []; //Array para grilla\n\n          newArrayDatosGrilla.push({\n            fechaDocumento: newFecha,\n            numeroFactura: dataVentas[i]['numeroFactura'],\n            nombreCliente: dataVentas[i]['nombreCliente'],\n            codigo: dataVentas[i]['codigo'],\n            rut: dataVentas[i]['rut'],\n            nombreTipoFactura: dataVentas[i]['nombreTipoFactura'],\n            Producto: dataVentas[i]['Producto'],\n            Cantidad: dataVentas[i]['cantidad'],\n            totalNeto: \"$\" + dataVentas[i]['totalNeto'],\n            IVA: \"$\" + dataVentas[i]['IVA'],\n            total: \"$\" + dataVentas[i]['total']\n          }); //array para excel.\n\n          newArrayDatosExcel.push(newFecha);\n          newArrayDatosExcel.push(dataVentas[i]['numeroFactura']);\n          newArrayDatosExcel.push(dataVentas[i]['nombreCliente']);\n          newArrayDatosExcel.push(dataVentas[i]['codigo']);\n          newArrayDatosExcel.push(dataVentas[i]['rut']);\n          newArrayDatosExcel.push(dataVentas[i]['nombreTipoFactura']);\n          newArrayDatosExcel.push(dataVentas[i]['Producto']);\n          newArrayDatosExcel.push(dataVentas[i]['cantidad']);\n          newArrayDatosExcel.push(\"$\" + dataVentas[i]['totalNeto']);\n          newArrayDatosExcel.push(\"$\" + dataVentas[i]['IVA']);\n          newArrayDatosExcel.push(\"$\" + dataVentas[i]['total']);\n          cantidadDatos += dataVentas[i]['cantidad'];\n          totalNeto += dataVentas[i]['totalNeto'];\n          totalIvav += dataVentas[i]['IVA'];\n          totalTotal += dataVentas[i]['total'];\n          newArrayDatosExcel2.push(newArrayDatosExcel);\n        }\n\n        totalNeto = '$' + totalNeto;\n        totalIvav = '$' + totalIvav;\n        totalTotal = '$' + totalTotal; //Guardamos los datos para la grilla\n\n        this.setState({\n          data: newArrayDatosGrilla\n        }); //Validamos que tenga datos.\n        //console.log(newArrayDatosExcel2.length);\n\n        let largoExcel = newArrayDatosExcel2.length;\n        console.log(largoExcel);\n\n        if (newArrayDatosExcel2.length >= 1) {\n          //Guardamos los datos para exportacion de excel.\n          let exportaDataExcel = [{\n            columns: arrayTitulos,\n            data: newArrayDatosExcel2\n          }, {\n            xSteps: 6,\n            //Columna\n            ySteps: 0,\n            //Lineo o posicion\n            columns: [\"Total\", `${cantidadDatos}`, `${totalNeto}`, `${totalIvav}`, `${totalTotal}`],\n            data: ['', '', '', '']\n          }];\n          console.log(exportaDataExcel);\n          this.exExcelTes(exportaDataExcel, \"Ventas\");\n        }\n      } else {}\n    });\n  }\n\n  exExcelTes(datosExport, name) {\n    ReactDOM.render( /*#__PURE__*/React.createElement(ExcelDownload, {\n      data: datosExport,\n      nombreDocument: name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 7\n      }\n    }), document.getElementById('callExcel'));\n  }\n\n  render() {\n    let filteredData = this.state.data;\n    let dataSelect = this.state.dataSelect; //Agregamos las columnas a la tabla.\n\n    const columns = [{\n      title: \"Fecha Documento\",\n      field: \"fechaDocumento\",\n      width: \"9%\"\n    }, {\n      title: \"N Factura\",\n      field: \"numeroFactura\",\n      width: \"15%\"\n    }, {\n      title: \"Nombre Cliente\",\n      field: \"nombreCliente\",\n      width: \"15%\"\n    }, {\n      title: \"Codigo\",\n      field: \"codigo\",\n      width: \"15%\"\n    }, {\n      title: \"Rut\",\n      field: \"rut\",\n      width: \"15%\"\n    }, {\n      title: \"Tipo Factura\",\n      field: \"nombreTipoFactura\",\n      width: \"15%\"\n    }, {\n      title: \"Producto\",\n      field: \"Producto\",\n      width: \"15%\"\n    }, {\n      title: \"Cantidad\",\n      field: \"Cantidad\",\n      width: \"15%\"\n    }, {\n      title: \"Total Neto\",\n      field: \"totalNeto\",\n      width: \"15%\"\n    }, {\n      title: \"IVA\",\n      field: \"IVA\",\n      width: \"15%\"\n    }, {\n      title: \"Total\",\n      field: \"total\",\n      width: \"15%\"\n    }]; //Opciones de data table\n\n    const options = {\n      layout: \"id\",\n      width: \"100%\",\n      pagination: \"local\",\n      paginationSize: 10,\n      movableColumns: true,\n      persistence: {\n        sort: true,\n        filter: true,\n        columns: true\n      },\n      persistenceID: \"dataSave\"\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 13\n      }\n    }, \"Ventas totales del Vendedor\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 21\n      }\n    }, \"Fecha de Inico\"), /*#__PURE__*/React.createElement(\"input\", {\n      onChange: e => this.change(e),\n      className: \"form-control\",\n      type: \"date\",\n      name: \"inicio\",\n      value: this.state.ciudad,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 21\n      }\n    }, \"Fecha de vencimiento\"), /*#__PURE__*/React.createElement(\"input\", {\n      onChange: e => this.change(e),\n      className: \"form-control\",\n      type: \"date\",\n      name: \"final\",\n      value: this.state.ciudad,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Autocomplete, {\n      multiple: true,\n      id: \"tags-outlined\",\n      options: dataSelect,\n      getOptionLabel: option => option.codigo,\n      filterSelectedOptions: true,\n      renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n        variant: \"outlined\",\n        label: \"Productos\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 21\n        }\n      })),\n      onChange: (event, val) => this.getOptionsSelect(val),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.consultaVentasProducto,\n      className: \"btn btn-primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 21\n      }\n    }, \" Consultar \"))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(React15Tabulator, {\n      columns: columns,\n      data: filteredData,\n      options: options,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"callExcel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nexport default ListaPagos;","map":{"version":3,"sources":["C:/Users/erika/Desktop/proyectos/Casa/distribuidora/front/src/Components/Home/Exportacion/ventasVendedorTotal.js"],"names":["React","ReactDOM","api","React15Tabulator","axios","moment","Autocomplete","TextField","ExcelDownload","top100Films","title","codigo","codigoCp","data","ListaPagos","Component","constructor","props","consultaVentasProducto","bind","exExcelTes","getOptionsSelect","state","inicio","final","dataSelect","arrayIdProductos","change","e","setState","target","name","value","componentDidMount","getProductos","get","then","res","status","vendedores","idVendedores","forEach","element","push","id","arrayIdVendedores","post","dataVentas","ventas","newArrayDatosGrilla","newArrayDatosExcel2","arrayTitulos","totalNeto","totalIvav","totalTotal","cantidadDatos","i","length","newFecha","Date","format","newArrayDatosExcel","fechaDocumento","numeroFactura","nombreCliente","rut","nombreTipoFactura","Producto","Cantidad","IVA","total","largoExcel","console","log","exportaDataExcel","columns","xSteps","ySteps","datosExport","render","document","getElementById","filteredData","field","width","options","layout","pagination","paginationSize","movableColumns","persistence","sort","filter","persistenceID","ciudad","option","params","event","val"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from 'react-dom';\r\nimport api from '../../config/Api';\r\nimport \"react-tabulator/lib/css/bootstrap/tabulator_bootstrap.min.css\";\r\nimport { React15Tabulator } from \"react-tabulator\";\r\nimport axios from 'axios';\r\nimport moment from 'moment';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport ExcelDownload from './exportExcel';\r\n\r\n\r\nconst top100Films = [\r\n    { title: 'Ventas', codigo: 0, codigoCp : 'cpVentas' },\r\n    { title: 'Venta de productos por fecha', codigo: 1, codigoCp : 'cpVentaProductos'},\r\n    { title: 'Ventas del vendedor', codigo: 2, codigoCp : 'cpVentaVendedor'},\r\n    { title: 'Ventas del vendedor pagadas', codigo: 3, codigoCp : 'cpVentaVendedorPagadas'},\r\n    { title: 'Ventas del vendedor inpagadas', codigo: 4, codigoCp : 'cpVentaVendedorInpagadas'},\r\n    { title: 'Ventas por producto', codigo: 5, codigoCp : 'cpVentaProducto'},\r\n    { title: 'Comisiones pagadas', codigo: 6, codigoCp : 'cpComisionPagadas'},\r\n    { title: 'Resumen ventas', codigo: 6, codigoCp : 'cpResuemenVentas'}\r\n  ];\r\n\r\n\r\nconst data = [];\r\nclass ListaPagos extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.consultaVentasProducto = this.consultaVentasProducto.bind(this);\r\n    this.exExcelTes = this.exExcelTes.bind(this);\r\n    this.getOptionsSelect = this.getOptionsSelect.bind(this);\r\n    this.state = { \r\n        data: '',\r\n        inicio : null,\r\n        final : null,\r\n        dataSelect : [],\r\n        arrayIdProductos : []\r\n    }\r\n  }\r\n\r\n  change(e) {\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    });\r\n  }\r\n\r\n  //Cargamos los datos de la tabla.\r\n  componentDidMount(){\r\n      this.getProductos();\r\n  }\r\n\r\n  getProductos(){\r\n    axios.get(`${api}/api/vendedor`)\r\n    .then(res => {\r\n        //Validamos que el status de la respuesta de 200.\r\n        if(res.status === 200){\r\n            let data = res.data.vendedores;\r\n            //console.log();\r\n            this.setState({ dataSelect : data});\r\n        }\r\n    });\r\n  }\r\n\r\n  getOptionsSelect(e){\r\n    let idVendedores = [];\r\n    e.forEach(element => {\r\n        idVendedores.push(element.id);\r\n    });\r\n    this.setState({ arrayIdVendedores : idVendedores});\r\n  }\r\n\r\n  //Insertamos los datos.\r\n  consultaVentasProducto(){\r\n    let inicio = this.state.inicio;\r\n    let final = this.state.final;\r\n    let idVendedores = this.state.arrayIdVendedores;\r\n\r\n    //console.log(idProductos);\r\n    const data = 1\r\n    this.setState({ data });\r\n\r\n    //Realizamos la consulta con las fehcas\r\n    axios.post(`${api}/api/informes/ventasVendedorTotal/${inicio}/${final}/${idVendedores}`)\r\n    .then(res => {\r\n        //Validamos que el status de la respuesta de 200.\r\n        if(res.status === 200){\r\n            let dataVentas = res.data.ventas;\r\n            let newArrayDatosGrilla = [];\r\n            let newArrayDatosExcel2 = [];\r\n\r\n            //Creamos los titulos.\r\n            let arrayTitulos = ['Fecha Documento','N Factura','Nombre Cliente','Tipo Factura','Codigo','Rut', 'Producto', 'cantidad', 'Total Neto','IVA','Total'];\r\n            let totalNeto = 0;\r\n            let totalIvav  = 0;\r\n            let totalTotal = 0;\r\n            let cantidadDatos = 0;\r\n            for (let i = 0; i < dataVentas.length; i++) {\r\n\r\n              //Convertimos la fecha \r\n              let newFecha = new Date(dataVentas[i]['fechaDocumento']);\r\n              newFecha = moment(newFecha).format('DD/MM/YYYY');\r\n\r\n              let newArrayDatosExcel = [];\r\n\r\n              //Array para grilla\r\n              newArrayDatosGrilla.push({\r\n                \r\n                fechaDocumento : newFecha,\r\n                numeroFactura : dataVentas[i]['numeroFactura'],\r\n                nombreCliente : dataVentas[i]['nombreCliente'],\r\n                codigo : dataVentas[i]['codigo'],\r\n                rut : dataVentas[i]['rut'],\r\n                nombreTipoFactura : dataVentas[i]['nombreTipoFactura'],\r\n                Producto : dataVentas[i]['Producto'],\r\n                Cantidad : dataVentas[i]['cantidad'],\r\n                totalNeto : \"$\"+dataVentas[i]['totalNeto'],\r\n                IVA : \"$\"+dataVentas[i]['IVA'],\r\n                total : \"$\"+dataVentas[i]['total']\r\n              });\r\n              //array para excel.\r\n              newArrayDatosExcel.push(newFecha);\r\n              newArrayDatosExcel.push(dataVentas[i]['numeroFactura']);\r\n              newArrayDatosExcel.push(dataVentas[i]['nombreCliente']);\r\n              newArrayDatosExcel.push(dataVentas[i]['codigo']);\r\n              newArrayDatosExcel.push(dataVentas[i]['rut']);\r\n              newArrayDatosExcel.push(dataVentas[i]['nombreTipoFactura']);\r\n              newArrayDatosExcel.push(dataVentas[i]['Producto']);\r\n              newArrayDatosExcel.push(dataVentas[i]['cantidad']);\r\n              newArrayDatosExcel.push(\"$\"+dataVentas[i]['totalNeto']);\r\n              newArrayDatosExcel.push(\"$\"+dataVentas[i]['IVA']);\r\n              newArrayDatosExcel.push(\"$\"+dataVentas[i]['total']);\r\n\r\n              cantidadDatos += dataVentas[i]['cantidad'];\r\n              totalNeto += dataVentas[i]['totalNeto'];\r\n              totalIvav += dataVentas[i]['IVA'];\r\n              totalTotal += dataVentas[i]['total'];\r\n              newArrayDatosExcel2.push(newArrayDatosExcel);\r\n            }\r\n            \r\n            totalNeto = '$'+totalNeto;\r\n            totalIvav = '$'+totalIvav;\r\n            totalTotal = '$'+totalTotal;\r\n            //Guardamos los datos para la grilla\r\n            this.setState({ data : newArrayDatosGrilla });\r\n\r\n            //Validamos que tenga datos.\r\n            //console.log(newArrayDatosExcel2.length);\r\n            let largoExcel = newArrayDatosExcel2.length;\r\n            console.log(largoExcel);\r\n            if(newArrayDatosExcel2.length >= 1){\r\n              //Guardamos los datos para exportacion de excel.\r\n              let exportaDataExcel = [{\r\n                columns: arrayTitulos,\r\n                data: newArrayDatosExcel2\r\n              },\r\n              {\r\n                  xSteps: 6,  //Columna\r\n                  ySteps: 0, //Lineo o posicion\r\n                  columns: [\"Total\", `${cantidadDatos}`,`${totalNeto}`, `${totalIvav}`, `${totalTotal}`],\r\n                  data : ['', '', '', '',]\r\n                }\r\n            ];\r\n              console.log(exportaDataExcel);\r\n              this.exExcelTes(exportaDataExcel, \"Ventas\");\r\n            }\r\n            \r\n        }else{\r\n            \r\n        }\r\n    })\r\n  }\r\n\r\n  exExcelTes(datosExport, name){\r\n    ReactDOM.render(\r\n      <ExcelDownload data={datosExport} nombreDocument={name}/>,\r\n      document.getElementById('callExcel')\r\n    );\r\n  }\r\n\r\n  \r\n  render() {\r\n\r\n    let filteredData = this.state.data;\r\n    let dataSelect = this.state.dataSelect;\r\n    //Agregamos las columnas a la tabla.\r\n    \r\n    const columns = [\r\n      { title: \"Fecha Documento\", field: \"fechaDocumento\", width: \"9%\"},\r\n      { title: \"N Factura\", field: \"numeroFactura\", width: \"15%\"},\r\n      { title: \"Nombre Cliente\", field: \"nombreCliente\", width: \"15%\"},\r\n      { title: \"Codigo\", field: \"codigo\", width: \"15%\"},\r\n      { title: \"Rut\", field: \"rut\", width: \"15%\"},\r\n      { title: \"Tipo Factura\", field: \"nombreTipoFactura\", width: \"15%\"},\r\n      { title: \"Producto\", field: \"Producto\", width: \"15%\"},\r\n      { title: \"Cantidad\", field: \"Cantidad\", width: \"15%\"},\r\n      { title: \"Total Neto\", field: \"totalNeto\", width: \"15%\"},\r\n      { title: \"IVA\", field: \"IVA\", width: \"15%\"},\r\n      { title: \"Total\", field: \"total\", width: \"15%\"}\r\n    ];\r\n    \r\n    //Opciones de data table\r\n    const options = {\r\n      layout:\"id\",\r\n      width: \"100%\",\r\n      pagination:\"local\",\r\n      paginationSize:10,\r\n      movableColumns:true,\r\n      persistence:{\r\n        sort:true,\r\n        filter:true,\r\n        columns:true,\r\n      },\r\n      persistenceID:\"dataSave\"\r\n    };\r\n    return (\r\n        <div>\r\n            <h1>Ventas totales del Vendedor</h1>\r\n            <div className = 'form-group'>\r\n                <div className = 'form-group'>\r\n                    <label>Fecha de Inico</label>\r\n                    <input onChange={e => this.change(e)} className= 'form-control' type = 'date' name='inicio' value= {this.state.ciudad}  />\r\n                </div>\r\n                <div className = 'form-group'>\r\n                    <label>Fecha de vencimiento</label>\r\n                    <input onChange={e => this.change(e)} className= 'form-control' type = 'date' name='final' value= {this.state.ciudad}  />\r\n                </div>\r\n                <div className = 'form-group'>\r\n                    \r\n                    <Autocomplete\r\n                    multiple\r\n                    id=\"tags-outlined\"\r\n                    options={dataSelect}\r\n                    getOptionLabel={(option) => option.codigo}\r\n                    filterSelectedOptions\r\n                    renderInput={(params) => (\r\n                    <TextField\r\n                        {...params}\r\n                        variant=\"outlined\"\r\n                        label=\"Productos\"\r\n                    />\r\n                    )}\r\n                    onChange={(event, val) => this.getOptionsSelect(val)}\r\n                    />\r\n                </div>\r\n                <div className = 'form-group'>\r\n                    <button type = 'button' onClick ={this.consultaVentasProducto} className = 'btn btn-primary'> Consultar </button>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <React15Tabulator columns={columns} data={filteredData} options={options}/>\r\n            </div>\r\n            <div id=\"callExcel\">\r\n              \r\n            </div>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ListaPagos;\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}